import logging
import os
import sys

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import keyboard
from dbase import db
from Stat import Motiv

motiv_router = Router()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
storage = MemoryStorage()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –ø–∞–º—è—Ç–∏


async def menu_motiv(message: types.Message):
    await message.answer(' *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º —Ä–∞–∑–¥–µ–ª —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é* üòé', reply_markup=keyboard.stinfo)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å
@motiv_router.message(F.text == "‚úÖ–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –í–∞—Å")
async def get_motivation(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        has_records = await db.has_records_in_table('Motivation')

        if not has_records:
            await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...üïê")

            # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            if os.path.exists('motivation.txt'):
                with open('motivation.txt', 'r', encoding='utf-8') as file:
                    for line in file:
                        motiv_text = line.strip()
                        await db.add_motiv(motiv_text)
                await message.answer("–û–∫!üèÅ")

            else:
                await message.answer("–§–∞–π–ª —Å –º–æ—Ç–∏–≤–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
                return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é
        motiv = await db.get_random_motivation()
        # logging.info(motiv) # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if motiv:
            await message.answer(f"‚úÖ {motiv}")
        else:
            await message.answer("üòí –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}, —Å—Ç—Ä–æ–∫–∞ {sys.exc_info()[2].tb_lineno}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π
@motiv_router.message(F.text == "üìù–î–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É")
async def motivation_create(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –í–∞—à–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏!")
    await state.set_state(Motiv.new_motiv)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
@motiv_router.message(F.text == "üìù–î–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É")
async def motivation_create(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –í–∞—à–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏!")
    await state.set_state(Motiv.new_motiv)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
@motiv_router.message(Motiv.new_motiv)
async def process_motivation(message: types.Message, state: FSMContext):
    motiv_text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    if not motiv_text or not motiv_text.strip():
        await message.answer("–¢–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(motivation=motiv_text)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    motiv_text = data.get('motivation')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª—é—á, —á—Ç–æ –∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏

    if not motiv_text:
        await message.answer("–¢–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.add_motiv(f'"{motiv_text}" - {message.from_user.full_name}')
        await message.answer(f"–¢–µ–∫—Å—Ç –í–∞—à–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, "
                             f"{message.from_user.full_name}! "
                             f"–¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
@motiv_router.message(F.text == "üìñ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
async def about_motiv(message: types.Message):
    await message.answer("üü©–ë–æ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ —É—Å–ø–µ—Ö—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π.\n "
                         "üü©–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º "
                         "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥. \n"
                         "üü©–ë–æ—Ç —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ "
                         "–∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")